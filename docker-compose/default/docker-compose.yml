services:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-deploy-service

  accounts-db:
    image: mysql
    container_name: accounts-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: accountsdb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    extends:
      file: common-config.yml
      service: network-deploy-service

  cards-db:
    image: mysql
    container_name: cards-db
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cardsdb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    extends:
      file: common-config.yml
      service: network-deploy-service

  loans-db:
    image: mysql
    container_name: loans-db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: loansdb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    extends:
      file: common-config.yml
      service: network-deploy-service

  kafka:
    image: apache/kafka:3.7.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "29092:29092"
    environment:
      KAFKA_CLUSTER_ID: "5L6g3nShT-eMCtK--X86sw"
      KAFKA_NODE_ID: "1"
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"

      # Listeners
      KAFKA_LISTENERS: "INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"

      # Logs and topic config
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"

    volumes:
      - ./kafka-data:/tmp/kraft-combined-logs

    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server kafka:9092 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "4000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: ""
    depends_on:
      - kafka

  message-queue:
    image: "uday510/message-queue:latest"
    container_name: message-queue
    depends_on:
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_healthy
    # environment:
    #   SPRING_RABBITMQ_HOST: "rabbitmq"
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_PROXY: "edge"
    command: 
      - "start-dev"
      - "--http-enabled=true"
      - "--http-port=8080"
    # healthcheck:
    #   test: >
    #     sh -c "curl -sf http://localhost:8080/health/ready | grep -q '\"status\":\"UP\"' || exit 1"
    #   interval: 10s
    #   timeout: 10s
    #   retries: 15
    #   start_period: 45s
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: uday510/config-server:latest
    container_name: config-server
    platform: linux/arm64
    ports:
      - "8071:8071"
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8071/actuator/health | grep UP || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: uday510/eureka-server:latest
    container_name: eureka-server
    platform: linux/arm64
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8070/actuator/health | grep UP || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  accounts:
    image: uday510/accounts:latest
    container_name: accounts-service
    platform: linux/arm64
    hostname: accounts-service
    depends_on:
      eurekaserver:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  cards:
    image: uday510/cards:latest
    container_name: cards-service
    platform: linux/arm64
    depends_on:
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:9000/actuator/health | grep UP || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  loans:
    image: uday510/loans:latest
    container_name: loans-service
    platform: linux/arm64
    depends_on:
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8090/actuator/health | grep UP || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  gatewayserver:
    image: uday510/gateway-server:latest
    container_name: gateway-server
    platform: linux/arm64
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gateway-server"
      OTEL_SERVICE_NAME: "gateway-server"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent localhost:8072/actuator/health | grep UP || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

networks:
  micro-network:
    external: true

volumes:
  kafka-data: