services:

  accounts-db:
    image: mysql
    container_name: accounts-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: accountsdb
    extends:
      file: common-config.yml
      service: network-deploy-service
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  cards-db:
    image: mysql
    container_name: cards-db
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cardsdb
    extends:
      file: common-config.yml
      service: network-deploy-service
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5

  loans-db:
    image: mysql
    container_name: loans-db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: loansdb
    extends:
      file: common-config.yml
      service: network-deploy-service
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5
      
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - micro-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
      
  kafka:
    image: apache/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_CLUSTER_ID: "5L6g3nShT-eMCtK--X86sw"
      KAFKA_NODE_ID: "1"
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
    volumes:
      - ./kafka-data:/tmp/kraft-combined-logs
    command: >
      sh -c "
      if [ ! -f /tmp/kraft-combined-logs/meta.properties ]; then
        /opt/kafka/bin/kafka-storage.sh format -t $${KAFKA_CLUSTER_ID} -c /opt/kafka/config/kraft/server.properties;
      fi &&
      /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/kraft/server.properties
      "

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: "uday510/config-server:latest"
    container_name: config-server
    platform: linux/arm64
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "uday510/eureka-server:latest"
    container_name: eureka-server
    platform: linux/arm64
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  accounts:
    image: "uday510/accounts:latest"
    container_name: accounts-service
    platform: linux/arm64
    hostname: accounts-service
    depends_on:
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  cards:
    image: "uday510/cards:latest"
    container_name: cards-service
    platform: linux/arm64
    depends_on:
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  loans:
    image: "uday510/loans:latest"
    container_name: loans-service
    platform: linux/arm64
    depends_on:
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configservice-config

  gatewayserver:
    image: "uday510/gateway-server:latest"
    container_name: gateway-server
    platform: linux/arm64
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gateway-server"
      OTEL_SERVICE_NAME: "gateway-server"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
    healthcheck:
      test: "curl --fail --silent localhost:8072/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    
    extends:
      file: common-config.yml
      service: microservice-configservice-config

networks:
  micro-network:
    external: true